{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport axios from 'axios';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { MyDrawer } from \"./components/drawer/drawer\";\nimport Epaper from \"./components/bottomtab/tabs/ePaper\";\nimport BottomTab from \"./components/bottomtab/bottomTab\";\nimport Login from \"./components/user/login\";\nimport { Register } from \"./components/user/register\";\nimport Content from \"./components/content/Content\";\nimport Popular from \"./components/pages/popular\";\nimport Taiping from \"./components/pages/taiping\";\nimport Nation from \"./components/pages/nation\";\nimport Covid from \"./components/pages/covid\";\nimport Videos from \"./components/pages/Videos\";\nvar Stack = createNativeStackNavigator();\nvar STYLES = ['default', 'dark-content', 'light-content'];\nvar TRANSITIONS = ['fade', 'slide', 'none'];\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context2.next = 17;\n            break;\n          }\n\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context2.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context2.next = 12;\n            break;\n          }\n\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context2.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          _context2.next = 14;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 14:\n          token = _context2.sent.data;\n          _context2.next = 18;\n          break;\n\n        case 17:\n          console.log('Must use physical device for Push Notifications');\n\n        case 18:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context2.abrupt(\"return\", token);\n\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hidden = _useState2[0],\n      setHidden = _useState2[1];\n\n  var _useState3 = useState(STYLES[2]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      statusBarStyle = _useState4[0],\n      setStatusBarStyle = _useState4[1];\n\n  var _useState5 = useState(TRANSITIONS[2]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      statusBarTransition = _useState6[0],\n      setStatusBarTransition = _useState6[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    if (Constants.isDevice && Platform.OS !== 'web') {\n      registerForPushNotificationsAsync().then(function (token) {\n        axios.post(\"https://nativenotify.com/api/expo/key\", {\n          appId: 625,\n          appToken: 'NeDM1H7hMktmiF2i4QoHsH',\n          expoToken: token\n        });\n      });\n      responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n        return console.log(response);\n      });\n      return function () {\n        Notifications.removeNotificationSubscription(notificationListener);\n        Notifications.removeNotificationSubscription(responseListener);\n      };\n    }\n  });\n  return React.createElement(NavigationContainer, {\n    independent: true\n  }, React.createElement(StatusBar, {\n    animated: true,\n    backgroundColor: \"black\",\n    barStyle: statusBarStyle,\n    showHideTransition: statusBarTransition,\n    hidden: hidden\n  }), React.createElement(Stack.Navigator, {\n    initialRouteName: \"drawer\"\n  }, React.createElement(Stack.Screen, {\n    name: \"drawer\",\n    component: MyDrawer,\n    options: {\n      headerShown: false\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"popular\",\n    component: Popular\n  }), React.createElement(Stack.Screen, {\n    name: \"taiping\",\n    component: Taiping\n  }), React.createElement(Stack.Screen, {\n    name: \"nation\",\n    component: Nation\n  }), React.createElement(Stack.Screen, {\n    name: \"covid\",\n    component: Covid\n  }), React.createElement(Stack.Screen, {\n    name: \"videos\",\n    component: Videos\n  }), React.createElement(Stack.Screen, {\n    name: \"bottom\",\n    component: BottomTab,\n    options: {\n      headerShown: false\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"login\",\n    component: Login,\n    options: {\n      title: \"The Taiping Times\"\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"register\",\n    component: Register,\n    options: {\n      title: \"The Taiping Times\"\n    }\n  }), React.createElement(Stack.Screen, {\n    name: \"content\",\n    component: Content,\n    options: {\n      headerShown: false\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/Cleverso/NewsApp/NewsApplication/App.js"],"names":["React","useState","useEffect","useRef","Constants","Notifications","axios","createNativeStackNavigator","NavigationContainer","MyDrawer","Epaper","BottomTab","Login","Register","Content","Popular","Taiping","Nation","Covid","Videos","Stack","STYLES","TRANSITIONS","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","registerForPushNotificationsAsync","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","getExpoPushTokenAsync","token","data","console","log","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","App","hidden","setHidden","statusBarStyle","setStatusBarStyle","statusBarTransition","setStatusBarTransition","notificationListener","responseListener","then","post","appId","appToken","expoToken","current","addNotificationResponseReceivedListener","response","removeNotificationSubscription","headerShown","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Platform } from 'react-native';\r\nimport Constants from 'expo-constants';\r\nimport * as Notifications from 'expo-notifications';\r\nimport axios from 'axios';\r\n\r\nimport { StatusBar } from 'react-native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { MyDrawer } from './components/drawer/drawer';\r\nimport Epaper from './components/bottomtab/tabs/ePaper';\r\nimport BottomTab from './components/bottomtab/bottomTab';\r\nimport Login from './components/user/login';\r\nimport { Register } from './components/user/register';\r\nimport Content from './components/content/Content';\r\nimport Popular from './components/pages/popular';\r\nimport Taiping from './components/pages/taiping';\r\nimport Nation from './components/pages/nation';\r\nimport Covid from './components/pages/covid';\r\nimport Videos from './components/pages/Videos';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nconst STYLES = ['default', 'dark-content', 'light-content'];\r\nconst TRANSITIONS = ['fade', 'slide', 'none'];\r\n\r\nNotifications.setNotificationHandler({handleNotification: async () => ({ shouldShowAlert: true, shouldPlaySound: false, shouldSetBadge: false, })});\r\n\r\nasync function registerForPushNotificationsAsync() { let token; if (Constants.isDevice) { const { status: existingStatus } = await Notifications.getPermissionsAsync(); let finalStatus = existingStatus; if (existingStatus !== 'granted') { const { status } = await Notifications.requestPermissionsAsync(); finalStatus = status; } token = (await Notifications.getExpoPushTokenAsync()).data; } else { console.log('Must use physical device for Push Notifications'); } if (Platform.OS === 'android') { Notifications.setNotificationChannelAsync('default', { name: 'default', importance: Notifications.AndroidImportance.MAX, vibrationPattern: [0, 250, 250, 250], lightColor: '#FF231F7C', }); } return token; }\r\n\r\nexport default function App() {\r\n  const [hidden, setHidden] = useState(false);\r\n  const [statusBarStyle, setStatusBarStyle] = useState(STYLES[2]);\r\n  const [statusBarTransition, setStatusBarTransition] = useState(TRANSITIONS[2]);\r\n\r\n  const notificationListener = useRef();\r\n  const responseListener = useRef();\r\n\r\n  useEffect(() => {\r\n    if(Constants.isDevice && Platform.OS !== 'web') {\r\n      registerForPushNotificationsAsync().then(token => {\r\n         axios.post(`https://nativenotify.com/api/expo/key`, { appId: 625, appToken: 'NeDM1H7hMktmiF2i4QoHsH', expoToken: token })\r\n       });\r\n       \r\n      responseListener.current = Notifications.addNotificationResponseReceivedListener(response => console.log(response));\r\n      return () => { Notifications.removeNotificationSubscription(notificationListener); Notifications.removeNotificationSubscription(responseListener); };\r\n    }\r\n  });\r\n\r\n  return (\r\n    <NavigationContainer independent={true}>\r\n      <StatusBar\r\n        animated={true}\r\n        backgroundColor=\"black\"\r\n        barStyle={statusBarStyle}\r\n        showHideTransition={statusBarTransition}\r\n        hidden={hidden} />\r\n      <Stack.Navigator initialRouteName=\"drawer\">\r\n        <Stack.Screen name=\"drawer\" component={MyDrawer} options={{headerShown: false}} />\r\n        <Stack.Screen name=\"popular\" component={Popular} />\r\n        <Stack.Screen name=\"taiping\" component={Taiping} />\r\n        <Stack.Screen name=\"nation\" component={Nation} />\r\n        <Stack.Screen name=\"covid\" component={Covid} />\r\n        <Stack.Screen name=\"videos\" component={Videos} />\r\n        <Stack.Screen name=\"bottom\" component={BottomTab} options={{headerShown: false}} />\r\n        <Stack.Screen name=\"login\" component={Login} options={{title:\"The Taiping Times\"}} />\r\n        <Stack.Screen name=\"register\" component={Register} options={{title:\"The Taiping Times\"}} />\r\n        <Stack.Screen name=\"content\" component={Content} options={{headerShown: false}} />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n} \r\n"]},"metadata":{},"sourceType":"module"}